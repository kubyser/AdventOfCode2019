def multiply(p, pos, params):
    a = params[0]["value"]
    b = params[1]["value"]
    r = params[2]["pos"]
    p[r] = a * b
    return p, pos+4

def sum(p, pos, params):
    a = params[0]["value"]
    b = params[1]["value"]
    r = params[2]["pos"]
    p[r] = a + b
    return p, pos+4

def inputAndSave(p, pos, params):
    a = input("Input value:")
    p[params[0]["pos"]] = a
    return p, pos+2

def readAndOutput(p, pos, params):
    a = params[0]["value"]
    print "Output value: ", a
    return p, pos+2

def jumpIfTrue(p, pos, params):
    if params[0]["value"] != 0:
        pos = params[1]["value"]
    else:
        pos = pos + 3
    return p, pos

def jumpIfFalse(p, pos, params):
    if params[0]["value"] == 0:
        pos = params[1]["value"]
    else:
        pos = pos + 3
    return p, pos

def lessThan(p, pos, params):
    p[params[2]["pos"]] = 1 if params[0]["value"] < params[1]["value"] else 0
    return p, pos+4

def checkEqual(p, pos, params):
    p[params[2]["pos"]] = 1 if params[0]["value"] == params[1]["value"] else 0
    return p, pos+4

operSet = {
    1 : {"numParams" : 3, "action" : sum},
    2 : {"numParams" : 3, "action" : multiply},
    3 : {"numParams" : 1, "action" : inputAndSave},
    4 : {"numParams" : 1, "action" : readAndOutput},
    5 : {"numParams" : 2, "action" : jumpIfTrue},
    6 : {"numParams" : 2, "action" : jumpIfFalse},
    7 : {"numParams" : 3, "action" : lessThan},
    8 : {"numParams" : 3, "action" : checkEqual}
}

def compute(p):
    pos = 0
    while True:
        op = p[pos];
        if op == 99:
            return p;
        opCode = op % 100
        parModes = op / 100
        if not opCode in operSet:
            print "Error - opcode ",opCode, " not found"
            break
        opDef = operSet[opCode]
        params = []
        for i in range(pos+1, pos+1+opDef["numParams"]):
            parMode = parModes % 10
            param = {
                "mode": parMode,
                "pos": p[i]
            }
            if parMode == 0:
                param["value"] = p[p[i]]
            elif parMode == 1:
                param["value"] = p[i]
            else:
                print "Error - invalid parameter mode ",parMode
                break
            params.append(param)
            parModes = parModes / 10
        p,pos = opDef["action"](p,pos,params)
        continue;

#p = [1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,19,5,23,1,23,6,27,2,9,27,31,1,5,31,35,1,35,10,39,1,39,10,43,2,43,9,47,
#     1,6,47,51,2,51,6,55,1,5,55,59,2,59,10,63,1,9,63,67,1,9,67,71,2,71,6,75,1,5,75,79,1,5,79,83,1,9,83,87,2,87,10,91,2,
#     10,91,95,1,95,9,99,2,99,9,103,2,10,103,107,2,9,107,111,1,111,5,115,1,115,2,119,1,119,6,0,99,2,0,14,0];
#p = [1002,4,3,4,33]
p=[3,225,1,225,6,6,1100,1,238,225,104,0,1101,37,61,225,101,34,121,224,1001,224,-49,224,4,224,102,8,223,223,1001,224,6,224,
   1,224,223,223,1101,67,29,225,1,14,65,224,101,-124,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1102,63,20,225,
   1102,27,15,225,1102,18,79,224,101,-1422,224,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1102,20,44,225,1001,69,5,224,
   101,-32,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1102,15,10,225,1101,6,70,225,102,86,40,224,101,-2494,224,224,
   4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1102,25,15,225,1101,40,67,224,1001,224,-107,224,4,224,102,8,223,223,101,
   1,224,224,1,223,224,223,2,126,95,224,101,-1400,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1002,151,84,224,
   101,-2100,224,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,
   1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,
   1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,
   1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,677,224,1002,223,2,223,1006,224,329,101,1,223,223,1107,677,226,224,
   102,2,223,223,1006,224,344,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,1008,677,677,224,1002,223,
   2,223,1006,224,374,101,1,223,223,7,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,
   1006,224,404,1001,223,1,223,7,677,677,224,1002,223,2,223,1006,224,419,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,
   224,434,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,449,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,
   224,464,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,479,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,
   224,494,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,509,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,
   524,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,
   554,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,569,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,
   584,1001,223,1,223,1007,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,
   614,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,644,
   101,1,223,223,8,677,226,224,102,2,223,223,1006,224,659,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]

#p=[3,0,4,0,99]

r = compute(p)
#print "Result: ",p[0]